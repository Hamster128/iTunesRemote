const exec = require('child_process').exec;
const iconv = require('iconv-lite');

var script_options = {
  cwd: 'node_modules/itunes_api/scripts',
  encoding: 'utf16',
  maxBuffer: 1024 * 1024 * 10
};

var execCmd = 'cscript /Nologo /U //E:jscript ';
var queue=[], queueActive = false;
var whenQueueIsEmpty = undefined;

doNextInQueue = function() {
  if(!queue.length || queueActive)
    return;

  queueActive = true;

  var job = queue.shift();
  
  if(job.func == 'play') {
    exec(execCmd+'play.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.play error '+err);
      
      if(job.cb)  
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'stop') {
    exec(execCmd+'stop.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.stop error '+err);
        
      if(job.cb)  
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'pause') {
    exec(execCmd+'pause.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.pause error '+err);
        
      if(job.cb)  
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'nextTrack') {
    exec(execCmd+'nextTrack.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.nextTrack error '+err);
        
      if(job.cb)  
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'backTrack') {
    exec(execCmd+'backTrack.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.backTrack error '+err);
        
      if(job.cb)  
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'getPlayerState') {
    exec(execCmd+'getPlayerState.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.getPlayerState error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        var s = str.split(';');
        job.cb({"state":parseInt(s[0]), "position":parseInt(s[1]), "volume":parseInt(s[2]), "shuffle":parseInt(s[3]), "repeat":parseInt(s[4])});
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'currentTrack') {
    exec(execCmd+'currentTrack.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.currentTrack error '+err);
        
      if(job.cb)
      {
        var str = iconv.decode(stdout, 'utf16');
        try {
          job.cb(JSON.parse(str));
        } catch(e) {
          console.log('itunes.currentTrack error parsing ['+str+'] '+e);
          job.cb(null);
        }
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }  
  else if(job.func == 'currentArtwork') {
    exec(execCmd+'currentArtwork.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.currentArtwork error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        try {
          job.cb(JSON.parse(str));
        } catch(e) {
          console.log('itunes.currentArtwork error parsing ['+str+'] '+e);
          job.cb({"found":false});
        }
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'getArtwork') {
    exec(execCmd+'getArtwork.js '+job.id_low+' '+job.id_high, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.getArtwork error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        job.cb(JSON.parse(str));
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'setPlayerPosition') {
    exec(execCmd+'setPlayerPosition.js '+job.newPosition, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.setPlayerPosition error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'setSoundVolume') {
    exec(execCmd+'setSoundVolume.js '+job.newVolume, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.setSoundVolume error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'setRepeat') {
    exec(execCmd+'setRepeat.js '+job.r, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.setRepeat error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'setShuffle') {
    exec(execCmd+'setShuffle.js '+job.s, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.setShuffle error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'albumTracks') {
    exec(execCmd+'albumTracks.js '+job.track.id_low+' '+job.track.id_high, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.albumTracks error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        try {
          job.cb(JSON.parse(str));
        } catch(e) {
          console.log('itunes.albumTracks error parsing ['+str+'] '+e);
        }
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'playAlbumFrom') {
    exec(execCmd+'playAlbumFrom.js '+job.id.id_low+' '+job.id.id_high, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.playAlbumFrom error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'playListByName') {
    exec(execCmd+'playListByName.js '+job.name, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.playListByName error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'playLists') {
    exec(execCmd+'playLists.js', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.playLists error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        try {
          job.cb(JSON.parse(str));
        } catch(e) {
          console.log('itunes.playLists error parsing ['+str+'] '+e);
        }
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'tracksPlaylists') {
    exec(execCmd+'tracksPlaylists.js '+job.track.id_low+' '+job.track.id_high, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.tracksPlaylists error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        job.cb(JSON.parse(str));
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'playlistTracks') {
    exec(execCmd+'playlistTracks.js '+job.id.id_low+' '+job.id.id_high+' '+job.id.skip+' '+job.id.mode+' '+job.id.sortOrder, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.playlistTracks error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        try {
          job.cb(JSON.parse(str));
        } catch(e) {
          console.log('itunes.playlistTracks error parsing ['+str+'] '+e);
        }
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'search') {
    exec(execCmd+'search.js '+job.type+' "'+job.val+'" ', script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.search error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        try {
          job.cb(JSON.parse(str));
        } catch(e) {
          console.log('itunes.search error parsing ['+str+'] '+e);
        }
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'playTrackInList') {
    exec(execCmd+'playTrackInList.js '+job.id.id_low+' '+job.id.id_high+' '+job.id.idx+' '+job.id.sortOrder, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.playTrackInList error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'setRating') {
    exec(execCmd+'setRating.js '+job.r.id_low+' '+job.r.id_high+' '+job.r.rating, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.setRating error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'removeTrackFromList') {
    exec(execCmd+'removeTrackFromList.js '+job.msg.track.id_low+' '+job.msg.track.id_high+' '+job.msg.id_low+' '+job.msg.id_high, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.removeTrackFromList error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'addTrackToList') {
    exec(execCmd+'addTrackToList.js '+job.msg.track.id_low+' '+job.msg.track.id_high+' '+job.msg.id_low+' '+job.msg.id_high, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.addTrackToList error '+err);
        
      if(job.cb)
        job.cb();
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else if(job.func == 'artistAlbums') {
    exec(execCmd+'artistAlbums.js '+job.id.id_low+' '+job.id.id_high, script_options, function(err, stdout, stderr) {
      if(err)
        console.log('itunes.artistAlbums error '+err);
        
      if(job.cb) {
        var str = iconv.decode(stdout, 'utf16');
        try {
          job.cb(JSON.parse(str));
        } catch(e) {
          console.log('itunes.artistAlbums error parsing ['+str+'] '+e);
        }
      }
        
      queueActive = false;
      doNextInQueue();
    });
  }
  else
    console.log('unknown command in queue '+job.func);
}

exports.play =  function(cb) {
  queue.push({'func':'play', 'cb':cb});
  doNextInQueue();
}

exports.stop =  function(cb) {
  queue.push({'func':'stop', 'cb':cb});
  doNextInQueue();
}

exports.pause =  function(cb) {
  queue.push({'func':'pause', 'cb':cb});
  doNextInQueue();
}

exports.nextTrack =  function(cb) {
  queue.push({'func':'nextTrack', 'cb':cb});
  doNextInQueue();
}

exports.backTrack =  function(cb) {
  queue.push({'func':'backTrack', 'cb':cb});
  doNextInQueue();
}

exports.getPlayerState =  function(cb) {
  queue.push({'func':'getPlayerState', 'cb':cb});
  doNextInQueue();
}

exports.currentTrack =  function(cb) {
  queue.push({'func':'currentTrack', 'cb':cb});
  doNextInQueue();
}

exports.currentArtwork =  function(cb) {
  queue.push({'func':'currentArtwork', 'cb':cb});
  doNextInQueue();
}

exports.getArtwork =  function(id_low, id_high, cb) {
  queue.push({'func':'getArtwork', 'cb':cb, 'id_low':id_low, 'id_high':id_high});
  doNextInQueue();
}

exports.setPlayerPosition =  function(newPosition, cb) {
  queue.push({'func':'setPlayerPosition', 'cb':cb, 'newPosition':newPosition});
  doNextInQueue();
}

exports.setSoundVolume =  function(newVolume, cb) {
  queue.push({'func':'setSoundVolume', 'cb':cb, 'newVolume':newVolume});
  doNextInQueue();
}

exports.setRepeat =  function(r, cb) {
  queue.push({'func':'setRepeat', 'cb':cb, 'r':r});
  doNextInQueue();
}

exports.setShuffle =  function(s, cb) {
  queue.push({'func':'setShuffle', 'cb':cb, 's':s});
  doNextInQueue();
}

exports.albumTracks =  function(track, cb) {
  queue.push({'func':'albumTracks', 'cb':cb, 'track':track});
  doNextInQueue();
}

exports.playAlbumFrom =  function(id, cb) {
  queue.push({'func':'playAlbumFrom', 'cb':cb, 'id':id});
  doNextInQueue();
}

exports.playLists =  function(cb) {
  queue.push({'func':'playLists', 'cb':cb});
  doNextInQueue();
}

exports.tracksPlaylists =  function(track, cb) {
  queue.push({'func':'tracksPlaylists', 'cb':cb, 'track':track});
  doNextInQueue();
}

exports.playlistTracks =  function(id, cb) {
  queue.push({'func':'playlistTracks', 'cb':cb, 'id':id});
  doNextInQueue();
}

exports.search =  function(type, val, cb) {
  queue.push({'func':'search', 'cb':cb, 'type':type, 'val':val});
  doNextInQueue();
}

exports.playTrackInList =  function(id, cb) {
  queue.push({'func':'playTrackInList', 'cb':cb, 'id':id});
  doNextInQueue();
}

exports.setRating =  function(r, cb) {
  queue.push({'func':'setRating', 'cb':cb, 'r':r});
  doNextInQueue();
}

exports.removeTrackFromList =  function(msg, cb) {
  queue.push({'func':'removeTrackFromList', 'cb':cb, 'msg':msg});
  doNextInQueue();
}

exports.addTrackToList =  function(msg, cb) {
  queue.push({'func':'addTrackToList', 'cb':cb, 'msg':msg});
  doNextInQueue();
}

exports.artistAlbums =  function(id, cb) {
  queue.push({'func':'artistAlbums', 'cb':cb, 'id':id});
  doNextInQueue();
}

exports.playListByName =  function(name, cb) {
  queue.push({'func':'playListByName', 'cb':cb, 'name':name});
  doNextInQueue();
}

exports.isActive = queueActive;

exports.whenQueueIsEmpty = whenQueueIsEmpty;